Slip No 30




Q1.



class BankAccount {
    private int balance = 5000;
    
    public synchronized void withdraw(String name, int amount) {
        if (balance >= amount) {
            System.out.println(name + " is withdrawing " + amount);
            try {
                Thread.sleep(1000); // Simulate time delay
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            balance -= amount;
            System.out.println(name + " completed withdrawal. Remaining balance: " + balance);
        } else {
            System.out.println(name + " attempted to withdraw " + amount + " but insufficient balance!");
        }
    }
}

class Customer implements Runnable {
    private BankAccount account;
    private String name;
    private int amount;
    
    public Customer(BankAccount account, String name, int amount) {
        this.account = account;
        this.name = name;
        this.amount = amount;
    }
    
    @Override
    public void run() {
        account.withdraw(name, amount);
    }
}

public class SynchronizationDemo {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();
        
        Thread t1 = new Thread(new Customer(account, "Alice", 3000));
        Thread t2 = new Thread(new Customer(account, "Bob", 4000));
        Thread t3 = new Thread(new Customer(account, "Charlie", 2000));
        
        t1.start();
        t2.start();
        t3.start();
    }
}




Q2.



