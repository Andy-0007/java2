Slip No 30




Q1.



class BankAccount {
    private int balance = 5000;
    
    public synchronized void withdraw(String name, int amount) {
        if (balance >= amount) {
            System.out.println(name + " is withdrawing " + amount);
            try {
                Thread.sleep(1000); // Simulate time delay
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            balance -= amount;
            System.out.println(name + " completed withdrawal. Remaining balance: " + balance);
        } else {
            System.out.println(name + " attempted to withdraw " + amount + " but insufficient balance!");
        }
    }
}

class Customer implements Runnable {
    private BankAccount account;
    private String name;
    private int amount;
    
    public Customer(BankAccount account, String name, int amount) {
        this.account = account;
        this.name = name;
        this.amount = amount;
    }
    
    @Override
    public void run() {
        account.withdraw(name, amount);
    }
}

public class SynchronizationDemo {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();
        
        Thread t1 = new Thread(new Customer(account, "Alice", 3000));
        Thread t2 = new Thread(new Customer(account, "Bob", 4000));
        Thread t3 = new Thread(new Customer(account, "Charlie", 2000));
        
        t1.start();
        t2.start();
        t3.start();
    }
}




Q2.
import java.sql.*;
import java.util.*;

class Main {
	public static void main(String args[]) {
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		int ch;
		Scanner s = new Scanner(System.in);
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/student", "root", "student");
			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			rs = stmt.executeQuery("select * from teacher");
			int count = 0;
			while (rs.next())
				count++;
			System.out.println("Total Records are = " + count);
			do {
				System.out.println("1 First. 2 Last. 3 Next. 4 Prev. 5. Exit");
				ch = s.nextInt();
				switch (ch) {
				case 1:
					rs.first();
					System.out.println("TId :" + rs.getInt(1) + " TName :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 2:
					rs.last();
					System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 3:
					rs.next();
					if (rs.isAfterLast())
						System.out.println("Can't move forword");
					else
						System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 4:
					rs.previous();
					if (rs.isBeforeFirst())
						System.out.println("Can't move backword");
					else
						System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 5:
					break;
				default:
					System.out.println("Enter valid operation");
				}
			} while (ch != 5);
		}
		catch (Exception e) {
			System.out.println(e);
		}
	}
}



