Slip No 13



Q1. 

 import java.sql.*; 
 public class DB4_DMetaDeta 
 { 
  public static void main(String[] args) throws Exception  
  { 
  Connection conn=null; 
  ResultSet rs=null; 
   
  Class.forName("org.postgresql.Driver"); 
 
 conn=DriverManager.getConnection("JDBC:postgresql://172.16.6.1/ty1
 70","ty170",""); 
  DatabaseMetaData dbmd=conn.getMetaData(); 
   
  System.out.println("Database Product 
Name="+dbmd.getDatabaseProductName()); 
  System.out.println("User Name ="+dbmd.getUserName()); 
  System.out.println("Driver Name ="+dbmd.getDriverName()); 
  System.out.println("Driver Version ="+dbmd.getDriverVersion()); 
  System.out.println("Database Major Version 
="+dbmd.getDriverMajorVersion()); 
  System.out.println("Database Minor Version 
="+dbmd.getDriverMinorVersion()); 
  rs=dbmd.getTables(null,null,null,new String[] {"TABLE"}); 
  System.out.println("List of tables....."); 
  while(rs.next()) 
  { 
String tblname=rs.getString("TABLE_NAME"); 
System.out.println("Table : "+tblname); 
} 
conn.close(); 
} 
} 


Q2.

import java.util.Random; 
class ThreadLifecycle extends Thread { 
public ThreadLifecycle(String name) { 
super(name); 
} 
public void run() { 
System.out.println("Thread " + getName() + " created."); 
try { 
// Generating a random sleep time between 0 to 4999 milliseconds 
Random rand = new Random(); 
int sleepTime = rand.nextInt(5000); // Generates a random integer between 0 to 4999 
System.out.println("Thread " + getName() + " will sleep for " + sleepTime + " 
milliseconds."); 
Thread.sleep(sleepTime); 
} catch (InterruptedException e) { 
System.out.println("Thread " + getName() + " interrupted."); 
return; 
} 
System.out.println("Thread " + getName() + " dead."); 
} 
} 
public class Thread2LifeCycle { 
public static void main(String[] args) { 
ThreadLifecycle thread1 = new ThreadLifecycle("Thread1"); 
ThreadLifecycle thread2 = new ThreadLifecycle("Thread2"); 
ThreadLifecycle thread3 = new ThreadLifecycle("Thread3"); 
// Starting threads 
thread1.start(); 
thread2.start(); 
thread3.start(); 
} 
}